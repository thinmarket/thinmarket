// faq-bot.js

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let faqData = {};
let faqLoaded = false;
let pendingOperatorQuestion = null;
const OPERATOR_KEYWORDS = ["–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—Å–∞–ø–ø–æ—Ä—Ç", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—á–µ–ª–æ–≤–µ–∫", "–ø–æ–º–æ—â—å"];
const MIN_QUESTION_LENGTH = 5;

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
fetch('faq-data.json')
  .then(res => res.json())
  .then(data => {
    faqData = data;
    faqLoaded = true;
    console.log("FAQ data loaded successfully");
  })
  .catch(err => {
    console.error("Error loading FAQ data:", err);
    faqData = {};
    faqLoaded = true;
  });

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function getPageName() {
  const path = window.location.pathname;
  return path.substring(path.lastIndexOf('/') + 1) || 'index.html';
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
(function createBotWidget() {
  // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
  const style = document.createElement('style');
  style.textContent = `
    .faq-bot-button {
      position: fixed;
      bottom: 30px;
      right: 30px;
      z-index: 9999;
      cursor: pointer;
      transition: transform 0.2s ease;
    }
    
    .faq-bot-button:hover {
      transform: scale(1.1);
    }
    
    .faq-bot-circle {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      font-weight: bold;
      transition: all 0.3s ease;
      overflow: hidden;
      padding: 0;
    }
    
    .faq-bot-circle img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    
    .faq-bot-circle:hover {
      box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);
      transform: translateY(-2px);
    }
    
    .faq-bot-modal {
      display: none;
      position: fixed;
      width: 380px;
      height: 600px;
      max-width: calc(100vw - 40px);
      max-height: calc(100vh - 40px);
      background: #1a1a1a;
      border-radius: 12px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.5);
      z-index: 10000;
      overflow: hidden;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      color: #ffffff;
      border: 1px solid #333;
      flex-direction: column;
    }
    
    .faq-bot-header {
      background: #252525;
      color: white;
      padding: 16px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: move;
      user-select: none;
      border-bottom: 1px solid #333;
      flex-shrink: 0;
    }
    
    .faq-bot-header h3 {
      margin: 0;
      font-size: 16px;
      font-weight: 600;
    }
    
    .faq-bot-header .status {
      font-size: 11px;
      opacity: 0.8;
      margin-top: 2px;
    }
    
    .close-faq-bot {
      background: none;
      border: none;
      color: white;
      font-size: 20px;
      cursor: pointer;
      padding: 0;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: background 0.2s;
    }
    
    .close-faq-bot:hover {
      background: rgba(255,255,255,0.1);
    }
    
    .faq-bot-chat {
      flex: 1;
      padding: 16px;
      overflow-y: auto;
      background: #1a1a1a;
      display: flex;
      flex-direction: column;
      gap: 12px;
      scroll-behavior: smooth;
      scrollbar-width: thin;
      scrollbar-color: #333 #1a1a1a;
      min-height: 0;
    }
    
    .faq-bot-chat::-webkit-scrollbar {
      width: 6px;
    }
    
    .faq-bot-chat::-webkit-scrollbar-track {
      background: #1a1a1a;
    }
    
    .faq-bot-chat::-webkit-scrollbar-thumb {
      background: #333;
      border-radius: 3px;
    }
    
    .faq-bot-chat::-webkit-scrollbar-thumb:hover {
      background: #444;
    }
    
    .message {
      display: flex;
      gap: 10px;
      animation: fadeIn 0.3s ease;
      flex-shrink: 0;
    }
    
    .message.user {
      flex-direction: row-reverse;
    }
    
    .message-avatar {
      width: 28px;
      height: 28px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: bold;
      flex-shrink: 0;
    }
    
    .message.user .message-avatar {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    
    .message.bot .message-avatar {
      background: #333;
      color: #8BC34A;
      overflow: hidden;
    }
    
    .message.bot .message-avatar img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
    }
    
    .message-content {
      max-width: 75%;
      padding: 10px 14px;
      border-radius: 16px;
      line-height: 1.4;
      word-wrap: break-word;
      font-size: 14px;
      flex-shrink: 0;
    }
    
    .message.user .message-content {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border-bottom-right-radius: 4px;
    }
    
    .message.bot .message-content {
      background: #252525;
      color: #ffffff;
      border: 1px solid #333;
      border-bottom-left-radius: 4px;
    }
    
    .faq-bot-input-area {
      padding: 16px;
      background: #252525;
      border-top: 1px solid #333;
      flex-shrink: 0;
    }
    
    .input-container {
      display: flex;
      gap: 10px;
      align-items: flex-end;
    }
    
    .user-input {
      flex: 1;
      padding: 10px 14px;
      border: 1px solid #444;
      border-radius: 20px;
      font-size: 14px;
      outline: none;
      transition: border-color 0.2s;
      resize: none;
      min-height: 18px;
      max-height: 80px;
      font-family: inherit;
      background: #1a1a1a;
      color: #ffffff;
    }
    
    .user-input:focus {
      border-color: #667eea;
    }
    
    .user-input::placeholder {
      color: #888;
    }
    
    .send-button {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      flex-shrink: 0;
      font-size: 14px;
    }
    
    .send-button:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    .send-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }
    
    .typing-indicator {
      display: none;
      align-items: center;
      gap: 8px;
      padding: 10px 14px;
      background: #252525;
      border: 1px solid #333;
      border-radius: 16px;
      border-bottom-left-radius: 4px;
      max-width: 75%;
      flex-shrink: 0;
    }
    
    .typing-indicator .message-avatar {
      overflow: hidden;
    }
    
    .typing-indicator .message-avatar img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
    }
    
    .typing-dots {
      display: flex;
      gap: 3px;
    }
    
    .typing-dot {
      width: 5px;
      height: 5px;
      border-radius: 50%;
      background: #8BC34A;
      animation: typing 1.4s infinite;
    }
    
    .typing-dot:nth-child(2) { animation-delay: 0.2s; }
    .typing-dot:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
      0%, 60%, 100% { transform: translateY(0); }
      30% { transform: translateY(-8px); }
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @media (max-width: 768px) {
      .faq-bot-modal {
        width: calc(100vw - 20px);
        height: calc(100vh - 20px);
        max-width: none;
        max-height: none;
        border-radius: 0;
      }
      
      .faq-bot-button {
        bottom: 20px;
        right: 20px;
      }
    }
  `;
  document.head.appendChild(style);

  // –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞
  const botButton = document.createElement('div');
  botButton.className = 'faq-bot-button';
  botButton.innerHTML = `
    <button class="faq-bot-circle">
      <img src="assets/img/buttons/Robot_bot.png" alt="FAQ Bot" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
    </button>
  `;
  document.body.appendChild(botButton);

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–æ—Ç–∞
  const modal = document.createElement('div');
  modal.className = 'faq-bot-modal';
  modal.style.display = 'none'; // –Ø–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  modal.innerHTML = `
    <div class="faq-bot-header">
      <div>
        <h3>FAQ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
        <div class="status">–û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å</div>
      </div>
      <button class="close-faq-bot">√ó</button>
    </div>
    <div class="faq-bot-chat">
      <div class="message bot">
        <div class="message-avatar">
          <img src="assets/img/buttons/Robot_bot.png" alt="Bot Avatar" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
        </div>
        <div class="message-content">
          –ü—Ä–∏–≤–µ—Ç! üëã –Ø FAQ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ThinMarket! –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∞–π—Ç—É –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø–æ–∫–∞ –∑–Ω–∞—é –º–∞–ª–æ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
        </div>
      </div>
    </div>
    <div class="typing-indicator">
      <div class="message-avatar">
        <img src="assets/img/buttons/Robot_bot.png" alt="Bot Avatar" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
      </div>
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    </div>
    <div class="faq-bot-input-area">
      <div class="input-container">
        <textarea 
          class="user-input" 
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
          rows="1"
        ></textarea>
        <button class="send-button">‚û§</button>
      </div>
    </div>
  `;
  document.body.appendChild(modal);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.querySelector('.faq-bot-circle').addEventListener('click', function() {
    console.log('FAQ bot button clicked!');
    toggleFaqBot();
  });
  document.querySelector('.close-faq-bot').addEventListener('click', closeFaqBot);
  document.querySelector('.send-button').addEventListener('click', findAnswer);
  
  const textarea = document.querySelector('.user-input');
  textarea.addEventListener('keypress', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      findAnswer();
    }
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
  textarea.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = Math.min(this.scrollHeight, 80) + 'px';
  });

  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  setupDragAndDrop();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —á–∞—Ç–∞
  window.addEventListener('resize', function() {
    const modal = document.querySelector('.faq-bot-modal');
    const chat = document.querySelector('.faq-bot-chat');
    if (modal && modal.style.display === 'block' && chat) {
      setTimeout(() => {
        chat.scrollTop = chat.scrollHeight;
      }, 100);
    }
  });
})();

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞
function toggleFaqBot() {
  const modal = document.querySelector('.faq-bot-modal');
  const currentDisplay = modal.style.display;
  
  if (currentDisplay === 'flex' || currentDisplay === 'block') {
    closeFaqBot();
  } else {
    openFaqBot();
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function openFaqBot() {
  const modal = document.querySelector('.faq-bot-modal');
  const btn = document.querySelector('.faq-bot-button');
  const btnRect = btn.getBoundingClientRect();
  const modalWidth = 380;
  const modalHeight = 600;
  const isMobile = window.matchMedia('(max-width: 768px)').matches;

  if (isMobile) {
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    modal.style.bottom = '10px';
    modal.style.left = '10px';
    modal.style.right = '10px';
    modal.style.top = '10px';
    modal.style.transform = 'none';
  } else {
    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
    let left = btnRect.left - modalWidth - 20;
    let top = btnRect.top - modalHeight - 20;

    // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ —Å–ª–µ–≤–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∞
    if (left < 10) {
      left = btnRect.right + 20;
    }

    // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ —Å–≤–µ—Ä—Ö—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∏–∑—É
    if (top < 10) {
      top = btnRect.bottom + 20;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    if (left + modalWidth > window.innerWidth - 10) {
      left = window.innerWidth - modalWidth - 10;
    }
    left = Math.max(10, left);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    if (top + modalHeight > window.innerHeight - 10) {
      top = window.innerHeight - modalHeight - 10;
    }
    top = Math.max(10, top);

    modal.style.left = left + 'px';
    modal.style.top = top + 'px';
    modal.style.transform = 'none';
  }

  // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display: flex –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã flexbox
  modal.style.display = 'flex';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const inputArea = modal.querySelector('.faq-bot-input-area');
  const chat = modal.querySelector('.faq-bot-chat');
  
  if (inputArea && chat) {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –≤–∏–¥–∏–º–æ
    inputArea.style.display = 'block';
    inputArea.style.visibility = 'visible';
    inputArea.style.opacity = '1';
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
    chat.style.flex = '1';
    chat.style.minHeight = '0';
    chat.style.overflowY = 'auto';
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  setTimeout(() => {
    if (chat) {
      chat.scrollTop = chat.scrollHeight;
    }
  }, 100);
  
  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const userInput = modal.querySelector('.user-input');
  if (userInput) {
    userInput.focus();
  }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeFaqBot() {
  const modal = document.querySelector('.faq-bot-modal');
  // –Ø–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.style.display = 'none';
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const userInput = document.querySelector('.user-input');
  if (userInput) {
    userInput.value = '';
    userInput.style.height = 'auto';
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  const typingIndicator = document.querySelector('.typing-indicator');
  if (typingIndicator) {
    typingIndicator.style.display = 'none';
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
  pendingOperatorQuestion = null;
  console.log('Modal closed, pendingOperatorQuestion reset:', pendingOperatorQuestion);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function setupDragAndDrop() {
  const modal = document.querySelector('.faq-bot-modal');
  const header = document.querySelector('.faq-bot-header');
  
  let isDragging = false;
  let offsetX = 0, offsetY = 0;

  header.addEventListener('mousedown', function(e) {
    if (window.matchMedia('(max-width: 768px)').matches) return;
    if (e.target.classList.contains('close-faq-bot')) return;
    
    isDragging = true;
    const rect = modal.getBoundingClientRect();
    offsetX = e.clientX - rect.left;
    offsetY = e.clientY - rect.top;
    document.body.style.userSelect = 'none';
    modal.style.cursor = 'grabbing';
  });

  document.addEventListener('mousemove', function(e) {
    if (!isDragging) return;
    
    let left = e.clientX - offsetX;
    let top = e.clientY - offsetY;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö viewport
    left = Math.max(0, Math.min(window.innerWidth - modal.offsetWidth, left));
    top = Math.max(0, Math.min(window.innerHeight - modal.offsetHeight, top));
    
    modal.style.left = left + 'px';
    modal.style.top = top + 'px';
  });

  document.addEventListener('mouseup', function() {
    isDragging = false;
    document.body.style.userSelect = '';
    modal.style.cursor = '';
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞
function findAnswer() {
  if (!faqLoaded) {
    showBotMessage("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ...");
    return;
  }

  const userInput = document.querySelector('.user-input');
  const userQ = userInput.value.trim();
  if (!userQ) return;

  const userQlower = userQ.toLowerCase();
  const page = getPageName();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  addUserMessage(userQ);
  userInput.value = '';
  userInput.style.height = 'auto';

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  showTypingIndicator();

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  if (isOperatorRequest(userQlower, userQ.length)) {
    setTimeout(() => {
      hideTypingIndicator();
      if (userQlower === '–æ–ø–µ—Ä–∞—Ç–æ—Ä') {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–æ–ø–µ—Ä–∞—Ç–æ—Ä", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pending question
        pendingOperatorQuestion = "–æ–ø–µ—Ä–∞—Ç–æ—Ä";
        showBotMessage(`
          –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: 24/7 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ).<br><br>
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.<br>
          –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ @username –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
        `);
      } else {
        handleOperatorRequest(userQ);
      }
    }, 1000);
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ pending question (–∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
  console.log("Checking pendingOperatorQuestion:", pendingOperatorQuestion);
  if (pendingOperatorQuestion) {
    setTimeout(() => {
      hideTypingIndicator();
      handleOperatorRequest(userQ);
    }, 1000);
    return;
  }

  // 3. –ü–æ–∏—Å–∫ –≤ FAQ - —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–æ—Ç–æ–º –≤ –æ–±—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
  const pageFaq = faqData[page] || [];
  const generalFaq = faqData['general'] || [];
  const allFaq = [...pageFaq, ...generalFaq];

  if (allFaq.length === 0) {
    setTimeout(() => {
      hideTypingIndicator();
      showBotMessage("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.");
    }, 1000);
    return;
  }

  try {
    const fuse = new Fuse(allFaq, {
      keys: [
        { name: 'q', weight: 0.7 },
        { name: 'a', weight: 0.3 }
      ],
      threshold: 0.35,
      minMatchCharLength: 2,
      includeScore: true
    });

    const results = fuse.search(userQlower);
    
    setTimeout(() => {
      hideTypingIndicator();
      
      if (results.length > 0) {
        const bestMatch = results.reduce((prev, curr) => 
          curr.score < prev.score ? curr : prev
        );
        
        showBotMessage(bestMatch.item.a);
      } else {
        suggestOperatorOrRephrase();
      }
    }, 1000);
  } catch (error) {
    console.error("Search error:", error);
    setTimeout(() => {
      hideTypingIndicator();
      showBotMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞.");
    }, 1000);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isOperatorRequest(text, length) {
  const result = (
    OPERATOR_KEYWORDS.some(word => text === word) ||
    (length < MIN_QUESTION_LENGTH && OPERATOR_KEYWORDS.some(word => text.includes(word)))
  );
  console.log('isOperatorRequest:', { text, length, result, keywords: OPERATOR_KEYWORDS });
  return result;
}

function handleOperatorRequest(question) {
  console.log('=== handleOperatorRequest START ===');
  console.log('Question:', question);
  console.log('Question length:', question.length);
  console.log('Pending question:', pendingOperatorQuestion);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  const usernameMatch = question.match(/@[a-zA-Z0-9_]{3,}/);
  
  if (usernameMatch) {
    // –ï—Å—Ç—å @username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const username = usernameMatch[0];
    const questionText = question.replace(username, '').trim();
    
    console.log('Found username:', username);
    console.log('Question text:', questionText);
    
    if (questionText.length < 3) {
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º pending question
      if (pendingOperatorQuestion && pendingOperatorQuestion !== '–æ–ø–µ—Ä–∞—Ç–æ—Ä') {
        console.log('Using pending question:', pendingOperatorQuestion);
        sendToOperator(pendingOperatorQuestion, username)
          .then(() => {
            console.log('Question sent successfully');
            showBotMessage("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.");
            pendingOperatorQuestion = null;
          })
          .catch(err => {
            console.error("Operator request failed:", err);
            showBotMessage("–£–ø—Å! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ß—Ç–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫, —è —Ç–æ–≥–¥–∞ —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞—à –Ω–∏–∫ –∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è");
          });
      } else {
        showBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–µ—Ä–µ–¥ —É–∫–∞–∑–∞–Ω–∏–µ–º @username.");
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log('Using current message as question');
      sendToOperator(questionText, username)
        .then(() => {
          console.log('Question sent successfully');
          showBotMessage("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.");
          pendingOperatorQuestion = null;
        })
        .catch(err => {
          console.error("Operator request failed:", err);
          showBotMessage("–£–ø—Å! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ß—Ç–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫, —è —Ç–æ–≥–¥–∞ —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞—à –Ω–∏–∫ –∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
        });
    }
    console.log('=== handleOperatorRequest END ===');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ pendingOperatorQuestion === '–æ–ø–µ—Ä–∞—Ç–æ—Ä'
  if (pendingOperatorQuestion === '–æ–ø–µ—Ä–∞—Ç–æ—Ä') {
    console.log('Processing operator request with question:', question);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const usernameMatch = question.match(/@[a-zA-Z0-9_]{3,}/);
    
    if (usernameMatch) {
      // –ï—Å—Ç—å @username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const username = usernameMatch[0];
      const questionText = question.replace(username, '').trim();
      
      console.log('Found username:', username);
      console.log('Question text:', questionText);
      
      if (questionText.length < 3) {
        showBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–µ—Ä–µ–¥ —É–∫–∞–∑–∞–Ω–∏–µ–º @username.");
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('Using current message as question');
        sendToOperator(questionText, username)
          .then((data) => {
            console.log('Question sent successfully:', data);
            showBotMessage("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.");
            pendingOperatorQuestion = null;
          })
          .catch(err => {
            console.error("Operator request failed:", err);
            showBotMessage("–£–ø—Å! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ß—Ç–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫, —è —Ç–æ–≥–¥–∞ —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞—à –Ω–∏–∫ –∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
          });
      }
    } else {
      // –ù–µ—Ç @username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∂–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
      if (question.length < MIN_QUESTION_LENGTH) {
        console.log('Question too short');
        showBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).");
      } else {
        console.log('Setting question and waiting for contact:', question);
        pendingOperatorQuestion = question;
        showBotMessage(`
          –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –¥–ª—è —Å–≤—è–∑–∏.
        `);
      }
    }
    console.log('=== handleOperatorRequest END ===');
    return;
  }

  if (pendingOperatorQuestion && pendingOperatorQuestion !== '–æ–ø–µ—Ä–∞—Ç–æ—Ä') {
    console.log('Processing pending question with contact:', question);
    const isValidFormat = /^@[a-zA-Z0-9_]{3,}$/.test(question);
    console.log('Is valid format:', isValidFormat);
    
    if (isValidFormat) {
      console.log('Valid Telegram format, sending to operator...');
      sendToOperator(pendingOperatorQuestion, question)
        .then(() => {
          console.log('Question sent successfully');
          showBotMessage("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.");
          pendingOperatorQuestion = null;
        })
        .catch(err => {
          console.error("Operator request failed:", err);
          showBotMessage("–£–ø—Å! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ß—Ç–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫, —è —Ç–æ–≥–¥–∞ —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞—à –Ω–∏–∫ –∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
        });
    } else {
      console.log('Invalid Telegram format');
      showBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.");
    }
    console.log('=== handleOperatorRequest END ===');
    return;
  }

  if (question.length < MIN_QUESTION_LENGTH) {
    console.log('Question too short');
    showBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).");
    return;
  }

  console.log('Setting pending question:', question);
  pendingOperatorQuestion = question;
  showBotMessage(`
    –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: 24/7 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ).<br><br>
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –¥–ª—è —Å–≤—è–∑–∏.<br>
    –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ @username –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
  `);
  console.log('=== handleOperatorRequest END ===');
}

function sendToOperator(question, contact) {
  const messageData = {
    text: `üîî –ù–û–í–´–ô –í–û–ü–†–û–° –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø üîî\n\n‚ùì –í–æ–ø—Ä–æ—Å: ${question}\n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: ${contact}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
  };
  
  console.log('=== sendToOperator START ===');
  console.log('Question:', question);
  console.log('Contact:', contact);
  console.log('Message data:', messageData);
  console.log('Full message text:', messageData.text);
  
  console.log('Starting fetch request...');
  
  // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  
  return fetch('https://thinmarket-faq-server.onrender.com/send-to-telegram', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(messageData),
    signal: controller.signal
  }).then(res => {
    clearTimeout(timeoutId);
    console.log('Server response status:', res.status);
    console.log('Server response ok:', res.ok);
    console.log('Server response:', res);
    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }
    return res.json();
  }).then(data => {
    console.log('Server response data:', data);
    console.log('=== sendToOperator END ===');
    return data;
  }).catch(err => {
    console.error('Fetch error:', err);
    console.log('=== sendToOperator ERROR ===');
    console.error('Error details:', err.message, err.stack);
    throw err;
  });
}

function addUserMessage(message) {
  const chat = document.querySelector('.faq-bot-chat');
  const messageDiv = document.createElement('div');
  messageDiv.className = 'message user';
  messageDiv.innerHTML = `
    <div class="message-avatar">üë§</div>
    <div class="message-content">${escapeHtml(message)}</div>
  `;
  chat.appendChild(messageDiv);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ–∫–Ω–∞ –≤–≤–æ–¥–∞
  const inputArea = document.querySelector('.faq-bot-input-area');
  if (inputArea) {
    inputArea.style.display = 'block';
    inputArea.style.visibility = 'visible';
    inputArea.style.opacity = '1';
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 10);
}

function showBotMessage(message) {
  const chat = document.querySelector('.faq-bot-chat');
  const messageDiv = document.createElement('div');
  messageDiv.className = 'message bot';
  messageDiv.innerHTML = `
    <div class="message-avatar">
      <img src="assets/img/buttons/Robot_bot.png" alt="Bot Avatar" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
    </div>
    <div class="message-content">${message}</div>
  `;
  chat.appendChild(messageDiv);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ–∫–Ω–∞ –≤–≤–æ–¥–∞
  const inputArea = document.querySelector('.faq-bot-input-area');
  if (inputArea) {
    inputArea.style.display = 'block';
    inputArea.style.visibility = 'visible';
    inputArea.style.opacity = '1';
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 100);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 300);
}

function showTypingIndicator() {
  const indicator = document.querySelector('.typing-indicator');
  indicator.style.display = 'flex';
  const chat = document.querySelector('.faq-bot-chat');
  
  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –ø–µ—á–∞—Ç–∏
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 50);
}

function hideTypingIndicator() {
  const indicator = document.querySelector('.typing-indicator');
  indicator.style.display = 'none';
  const chat = document.querySelector('.faq-bot-chat');
  
  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 50);
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function suggestOperatorOrRephrase() {
  showBotMessage(`
    –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.<br><br>
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:<br>
    ‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å<br>
    ‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (–≤–≤–µ–¥–∏—Ç–µ "–æ–ø–µ—Ä–∞—Ç–æ—Ä")
  `);
}
